package server

type staticFile struct {
	Content string
	MIMEType string
}

// This file is autogenerated by go generate. Do not modify.
var webStatics = map[string]staticFile{ 
	"/web/assets/lens.js": { Content: `var Lens = {};
;(function () {

  var nil = function () { };

  if (!console) {
    console = { log: nil };
  }

  var log = {
    debug: nil,
    info:  nil,
    warn:  nil,
    error: nil,

    level: function (level) {
      log.debug = nil;
      log.info  = nil;
      log.warn  = nil;
      log.error = nil;

      switch (level) {
      case 'debug': log.debug = console.log;
      case 'info':  log.info  = console.log;
      case 'warn':  log.warn  = console.log;
      case 'error': log.error = console.log;
      }
    }
  };

  Lens.log = log;
})()
;(function () {
  const SET_ATTRIBUTE    = 1,
        REMOVE_ATTRIBUTE = 2,
        SET_PROPERTY     = 3,
        REMOVE_PROPERTY  = 4,
        REPLACE_NODE     = 5,
        APPEND_CHILD     = 6,
        REMOVE_CHILD     = 7,
        REPLACE_TEXT     = 8;

  /* diff the ATTRIBUTES of two nodes, and return a
     (potentially empty) patch op list. */
  var diffa = function (a, b) {
    const ops = [];
    const _a  = {};
    const _b  = {};

    for (let i = 0; i < a.attributes.length; i++) {
      _a[a.attributes[i].nodeName] = a.attributes[i].nodeValue;
    }
    for (let i = 0; i < b.attributes.length; i++) {
      _b[b.attributes[i].nodeName] = b.attributes[i].nodeValue;
    }

    /* if the attribute is only defined in (a), then
       it has been removed in (b) and should be patched
       as a REMOVE_ATTRIBUTE.  */
    for (let attr in _a) {
      if (!(attr in _b)) {
        ops.push({
          op:    REMOVE_ATTRIBUTE,
          node:  a,
          key:   attr,
        });
      }
    }

    /* if the attribute is only defined in (b), or is
       defined in both with different values, patch as
       a SET_ATTRIBUTE to get the correct value. */
    for (let attr in _b) {
      if (!(attr in _a) || _a[attr] !== _b[attr]) {
        ops.push({
          op:    SET_ATTRIBUTE,
          node:  a,
          key:   attr,
          value: _b[attr]
        });
      }
    }

    return ops;
  };

  var diffe = function (a, b) {
    if (a.localName === b.localName) {
      return diffa(a, b);
    }
    return null;
  };

  var difft = function (a, b) {
    if (a.textContent === b.textContent) {
      return [];
    }
    return [{
      op:   REPLACE_TEXT,
      node: a,
      with: b.textContent
    }];
  };

  /* diff two NODEs, without recursing through child nodes */
  var diffn1 = function (a, b) {
    if (a.nodeType != b.nodeType) {
      /* nothing in common */
      return null;
    }

    if (a.nodeType == Node.ELEMENT_NODE) {
      return diffe(a, b);
    }
    if (a.nodeType == Node.TEXT_NODE) {
      return difft(a, b);
    }
    if (a.nodeType == Node.COMMENT_NODE) {
      return null;
    }

    console.log('unrecognized a type %s', a.nodeType);
    return null;
  };

  /* diff two NODEs, co-recursively with diff() */
  var diffn = function (a, b) {
    let ops = diffn1(a, b);

    if (ops) {
      return ops.concat(diff(a, b));
    }

    return [{
      op:   REPLACE_NODE,
      node: a,
      with: b
    }];
  };

  window.diff = function (a, b) {
    let ops = [];
    const { childNodes: _a } = a;
    const { childNodes: _b } = b;

    const _al = _a ? _a.length : 0;
    const _bl = _b ? _b.length : 0;

    for (let i = 0; i < _bl; i++) {
      if (!_a[i]) {
        ops.push({
          op:    APPEND_CHILD,
          node:  a,
          child: _b[i]
        });
        continue;
      }

      ops = ops.concat(diffn(_a[i], _b[i]));
    }

    for (var i = _bl; i < _al; i++) {
      ops.push({
        op:    REMOVE_CHILD,
        node:  a,
        child: _a[i]
      });
    }

    return ops;
  };




  window.patch = function (e, ops) {
    for (let i = 0; i < ops.length; i++) {
      switch (ops[i].op) {
        case SET_ATTRIBUTE:    ops[i].node.setAttribute(ops[i].key, ops[i].value);            break;
        case REMOVE_ATTRIBUTE: ops[i].node.removeAttribute(ops[i].key);                       break;
        case SET_PROPERTY:     /* FIXME needs implemented! */                                 break;
        case REMOVE_PROPERTY:  /* FIXME needs implemented! */                                 break;
        case REPLACE_NODE:     ops[i].node.parentNode.replaceChild(ops[i].with, ops[i].node); break;
        case APPEND_CHILD:     ops[i].node.appendChild(ops[i].child);                         break;
        case REMOVE_CHILD:     ops[i].node.removeChild(ops[i].child);                         break;
        case REPLACE_TEXT:     ops[i].node.textContent = ops[i].with;                         break;
        default:
          console.log('unrecognized patch op %d for ', ops[i].op, ops[i]);
          break;
      }
    }
  };




  window.explainPatch = function (ops) {
    var l = [];
    for (let i = 0; i < ops.length; i++) {
      switch (ops[i].op) {
        case SET_ATTRIBUTE:    l.push(['SET_ATTRIBUTE',    ops[i].node, ops[i].key+'='+ops[i].value]); break;
        case REMOVE_ATTRIBUTE: l.push(['REMOVE_ATTRIBUTE', ops[i].node, ops[i].key]);                  break;
        case SET_PROPERTY:     l.push(['SET_PROPERTY',     'FIXME']);                                  break;
        case REMOVE_PROPERTY:  l.push(['REMOVE_PROPERTY',  'FIXME']);                                  break;
        case REPLACE_NODE:     l.push(['REPLACE_NODE',     ops[i].node, { with: ops[i].with }]);       break;
        case APPEND_CHILD:     l.push(['APPEND_CHILD',     ops[i].node, { child: ops[i].child }]);     break;
        case REMOVE_CHILD:     l.push(['REMOVE_CHILD',     ops[i].node, { child: ops[i].child }]);     break;
        case REPLACE_TEXT:     l.push(['REPLACE_TEXT',     ops[i].node, { with: ops[i].with }]);       break;
        default:               l.push(['**UNKNOWN**',      ops[i]]);                                   break;
      }
    }
    return l;
  };
})(window, document);
;(function () {

  var __templates = {};
  var template = function (name, data) {
    if (!(name in __templates)) {
      Lens.log.debug('template {%s} not found in the cache; compiling from source.', name);
      __templates[name] = compile(name);
    }

    return __templates[name](data || {});
  };

  var parse = function (src) {
    var tokenizer = new RegExp('([\\s\\S]*?)\\[\\[([\\s\\S]*?)\\]\\]([\\s\\S]*)');
    var str = function (s) {
      if (!s) { return "''"; }
      return "'"+s.replace(/(['\\])/g, '\\$1').replace(/\n/g, "\\n")+"'";
    };

    var code = [];
    for (;;) {
      var tokens = tokenizer.exec(src)
      if (!tokens) {
        code.push('__ += '+str(src)+';');
        break;
      }

      if (tokens[2][0] == ':') { /* trim preceeding literal */
        tokens[1] = tokens[1].replace(/\s+$/, '');
        tokens[2] = tokens[2].substr(1);
      }
      if (tokens[2][tokens[2].length - 1] == ':') { /* trim following literal */
        tokens[3] = tokens[3].replace(/^\s+/, '');
        tokens[2] = tokens[2].substr(0, tokens[2].length-2);
      }

      code.push('__ += '+str(tokens[1])+';');
      if (tokens[2][0] == '=') {
        code.push('__ += ('+tokens[2].replace(/^=\s*/, '')+');');

      } else if (tokens[2][0] != '#') { /* skip comments */
        code.push(tokens[2]);
      }

      src = tokens[3];
    }

    return code.join('');
  };

  var compile = function (name) {
    name = name.toString();
    var script = document.getElementById('template:'+name);
    if (!script) {
      Lens.log.error('unable to find a <script> element with id="template:%s"', name);
      return function () {
        throw "Template {"+name+"} not found";
      };
    }

    var code = parse(script.innerHTML);

    return function (_) {
      /* the output variable */
      var __ = '';

      /* namespaced helper functions */
      var lens = {



        /* maybe(x,fallback)

           fallback to a default value if a given variable
           is undefined, or was not provided.

           example:

             [[= lens.maybe(x, "no x given") ]]

         */
        maybe: function (a, b) {
          return typeof(a) !== 'undefined' ? a : b;
        },

        /* escapeHTML(x)

           return a sanitized version of x, with the dangerous HTML
           entities like <, > and & replaced.  Also replaces double
           quote (") with the &quot; representation, so that you can
           embed values in form element attributes.

           example:

             <input type="text" name="display"
                    value="[[= lens.htmlEscape(_.display) ]]">

           lens.h() is an alias, so you can also do this:

             <input type="text" name="display"
                    value="[[= lens.h(_.display) ]]">
         */
        escapeHTML: function (s) {
          var t = document.createElement('textarea');
          t.innerText = s;
          return t.innerHTML.replace(/"/g, '&quot;');
        },

        /* include(template)
           include(template, _.other.data)

           splices the output of another template into the current
           output, at the calling site.  This can be useful for
           breaking up common elements of a UI into more manageable
           chunks.

           example:

             <div id="login">[[ lens.include('signin'); ]]</div>

           you can also provide a data object that will become the
           ` + "`" + `_` + "`" + ` variable inside the called template:

             [[ lens.include('alert', { alert: "something broke" }); ]]

           as a "language construct", this function is also aliased
           as (toplevel) ` + "`" + `include()` + "`" + `, and it can be used in [[= ]]
           constructs:

             [[= include('other-template') ]]

         */
        include: function (name, data) {
          __ += template(name, data || _);
          return '';
        }
      };

      /* aliases ... */
      lens.u = encodeURIComponent;
      lens.h = lens.escapeHTML;
      var include = lens.include;

      Lens.log.debug('evaluating the {%s} template', name);
      eval(code);
      return __;
    };
  };

  window.parseTemplate = parse;

  if (typeof(jQuery) !== 'undefined') {
    jQuery.template = template;

    jQuery.fn.template = function (name, data, force) {
      if (force || this.length == 0) {
        this.html(template(name, data));
      } else {
        window.patch(this[0], diff(this[0], $('<div>'+template(name, data)+'</div>')[0]));
      }
      return this;
    };

  } else if (typeof(window) !== 'undefined') {
    window.template = template;

  } else {
    throw 'neither jQuery or top-level window object were found; unsure where to attach template()...';
  }
})();
;(function () {
  var strftime = function (fmt, d) {
    if (!(d instanceof Date)) {
      var _d = new Date();
      if (!isNaN(d)) {
        _d.setTime(d * 1000); /* epoch s -> ms */
      }
      d = _d;
    }
    if (typeof(d) === 'undefined') {
      return "";
    }

    en_US = {
      pref: {
        /* %c */ datetime: function (d) { return strftime("%a %b %e %H:%M:%S %Y", d); },
        /* %x */ date:     function (d) { return strftime("%m/%d/%Y", d); },
        /* %X */ time:     function (d) { return strftime("%H:%M:%S", d); }
      },
      weekday: {
        abbr: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        full: ['Sunday',
               'Monday',
               'Tuesday',
               'Wednesday',
               'Thursday',
               'Friday',
               'Saturday']
      },
      month: {
        abbr: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
               'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        full: ['January',
               'February',
               'March',
               'April',
               'May',
               'June',
               'July',
               'August',
               'September',
               'October',
               'November',
               'December']
      },
      AM: "AM", am: "am", PM: "PM", pm: "pm",
      ordinal: ['th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th', 'th', //  1 - 10
                      'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', 'th', // 11 - 20
                      'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th', 'th', // 21 - 30
                      'st'],
      zero:  ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09',
              '10', '11', '12', '13', '14', '15', '16', '17', '18', '19',
              '20', '21', '22', '23', '24', '25', '26', '27', '28', '29',
              '30', '31', '32', '33', '34', '35', '36', '37', '38', '39',
              '40', '41', '42', '43', '44', '45', '46', '47', '48', '49',
              '50', '51', '52', '53', '54', '55', '56', '57', '58', '59'],

      space: [' 0', ' 1', ' 2', ' 3', ' 4', ' 5', ' 6', ' 7', ' 8', ' 9',
              '10', '11', '12', '13', '14', '15', '16', '17', '18', '19',
              '20', '21', '22', '23', '24', '25', '26', '27', '28', '29',
              '30', '31', '32', '33', '34', '35', '36', '37', '38', '39',
              '40', '41', '42', '43', '44', '45', '46', '47', '48', '49',
              '50', '51', '52', '53', '54', '55', '56', '57', '58', '59'],
    };

    var lc = en_US;

    var inspec = false;
    var alt_o  = false;

    var s = '';
    for (var i = 0; i < fmt.length; i++) {
      var c = fmt.charCodeAt(i);
      if (inspec) {
        switch (c) {
        // %%   A literal '%' character
        case 37:
          s += '%';
          break;

        // %a   The abbreviated name of the day of the week according to the
        //      current locale.
        case 97:
          s += lc.weekday.abbr[d.getDay()];
          break;

        // %A   The full name of the day of the week according to the current
        //      locale.
        case 65:
          s += lc.weekday.full[d.getDay()];
          break;

        // %b   The abbreviated month name according to the current locale.
        case 98:
          s += lc.month.abbr[d.getMonth()];
          break;

        // %h   Equivalent to %b.
        case 104:
          s += lc.month.abbr[d.getMonth()];
          break;

        // %B   The full month name according to the current locale.
        case 66:
          s += lc.month.full[d.getMonth()];
          break;

        // %c   The preferred date and time representation for the current
        //      locale.
        case 99:
          s += lc.pref.datetime(d);
          break;

        // %C   The century number (year/100) as a 2-digit integer
        case 67:
          s += parseInt(d.getFullYear() / 100);
          break;

        // %d   The day of the month as a decimal number (range 01 to 31).
        case 100:
          s += lc.zero[d.getDate()];
          break;

        // %D   Equivalent to %m/%d/%y.  (Yecch—for Americans only.  Americans
        //      should note that in other countries %d/%m/%y is rather common.
        //      This means that in international context this format is
        //      ambiguous and should not be used.)
        case 68:
          s += strftime("%m/%d/%y", d);
          break;

        // %e   Like %d, the day of the month as a decimal number, but a
        //      leading zero is replaced by a space.
        case 101:
          s += d.getDate().toString()+(alt_o ? lc.ordinal[d.getDate()] : '');
          break;

        // %E   Modifier: use alternative format, see below.
        case 69:
          // not supported; just skip it
          continue;

        // %F   Equivalent to %Y-%m-%d (the ISO 8601 date format).
        case 70:
          s += strftime("%Y-%m-%d", d);
          break;

        // %G   The ISO 8601 week-based year (see NOTES) with century as a
        //      decimal number.  The 4-digit year corresponding to the ISO
        //      week number (see %V).  This has the same format and value as
        //      %Y, except that if the ISO week number belongs to the previous
        //      or next year, that year is used instead.
        case 71:
          throw "this strftime() does not support '%G'";

        // %g   Like %G, but without century, that is, with a 2-digit year
        //      (00-99).
        case 103:
          throw "this strftime() does not support '%g'";

        // %H   The hour as a decimal number using a 24-hour clock (range 00 to 23).
        case 72:
          s += lc.zero[d.getHours()]
          break;

        // %I   The hour as a decimal number using a 12-hour clock (range 01 to 12)
        case 73:
          s += lc.zero[d.getHours() % 12 == 0 ? 12 : d.getHours() % 12];
          break;

        // %j   The day of the year as a decimal number (range 001 to 366).
        case 106:
          throw "this strftime() does not support '%j'";

        // %k   The hour (24-hour clock) as a decimal number (range 0 to 23);
        //      single digits are preceded by a blank.  (See also %H.)
        case 107:
          s += lc.space[d.getHours()];
          break;

        // %l   The hour (12-hour clock) as a decimal number (range 1 to 12);
        //      single digits are preceded by a blank.  (See also %I.)
        case 108:
          s += lc.space[d.getHours() % 12 == 0 ? 12 : d.getHours() % 12];
          break;

        // %m   The month as a decimal number (range 01 to 12).
        case 109:
          s += lc.zero[d.getMonth()+1];
          break;

        // %M   The minute as a decimal number (range 00 to 59).
        case 77:
          s += lc.zero[d.getMinutes()];
          break;

        // %n   A newline character.
        case 110:
          s += "\n";
          break;

        // %O   Modifier: use alternative format, see below.
        case 79:
          alt_o = true;
          continue;

        // %p   Either "AM" or "PM" according to the given time value, or the
        //      corresponding strings for the current locale.  Noon is treated
        //      as "PM" and midnight as "AM".
        case 112:
          s += (d.getHours() < 12 ? lc.AM : lc.PM);
          break;

        // %P   Like %p but in lowercase: "am" or "pm" or a corresponding
        //      string for the current locale.
        case 80:
          s += (d.getHours() < 12 ? lc.am : lc.pm);
          break;

        // %r   The time in a.m. or p.m. notation.  In the POSIX locale this
        //      is equivalent to %I:%M:%S %p.
        case 114:
          s += lc.zero[d.getHours() % 12 == 0 ? 12 : d.getHours() % 12] + ":" +
               lc.zero[d.getMinutes()]                                  + ":" +
               lc.zero[d.getSeconds()]                                  + " " +
               (d.getHours() < 12 ? lc.AM : lc.PM);
          break;

        // %R   The time in 24-hour notation (%H:%M).  For a version
        //      including the seconds, see %T below.
        case 82:
          s += lc.zero[d.getHours()] + ":" +
               lc.zero[d.getMinutes()];
          break;

        // %s   The number of seconds since the Epoch,
        //      1970-01-01 00:00:00+0000 (UTC).
        case 115:
          s += d.getTime().toString();
          break;

        // %S   The second as a decimal number (range 00 to 60).  (The range
        //      is up to 60 to allow for occasional leap seconds.)
        case 83:
          s += lc.zero[d.getSeconds()];
          break;

        // %t   A tab character.
        case 116:
          s += "\t";
          break;

        // %T   The time in 24-hour notation (%H:%M:%S).
        case 84:
          s += lc.zero[d.getHours()]   + ":" +
               lc.zero[d.getMinutes()] + ":" +
               lc.zero[d.getSeconds()];
          break;

        // %u   The day of the week as a decimal, range 1 to 7, Monday being 1.
        //       See also %w.
        case 117:
          var wday = d.getDay();
          if (wday == 0) { wday = 7 };
          s += (wday).toString()+(alt_o ? lc.ordinal[wday] : '');
          break;

        // %U   The week number of the current year as a decimal number, range
        //      00 to 53, starting with the first Sunday as the first day of
        //      week 01.  See also %V and %W.
        case 85:
          throw "this strftime() does not support '%U'";

        // %V   The ISO 8601 week number (see NOTES) of the current year as a
        //      decimal number, range 01 to 53, where week 1 is the first week
        //      that has at least 4 days in the new year.  See also %U and %W.
        case 86:
          throw "this strftime() does not support '%V'";

        // %w   The day of the week as a decimal, range 0 to 6, Sunday being 0
        //      See also %u.
        case 119:
          s += (d.getDay()).toString();
          break;

        // %W   The week number of the current year as a decimal number, range
        //      00 to 53, starting with the first Monday as the first day of
        //      week 01.
        case 87:
          throw "this strftime() does not support '%W'";

        // %x   The preferred date representation for the current locale
        //      without the time.
        case 120:
          s += lc.pref.date(d);
          break;

        // %X   The preferred time representation for the current locale
        //      without the date.
        case 88:
          s += lc.pref.time(d);
          break;

        // %y   The year as a decimal number without a century (range 00 to 99).
        case 121:
          s += lc.zero[d.getFullYear() % 100];
          break;

        // %Y   The year as a decimal number including the century.
        case 89:
          s += d.getFullYear();
          break;

        // %z   The +hhmm or -hhmm numeric timezone (that is, the hour and
        //      minute offset from UTC).
        case 122:
          throw "this strftime() does not support '%z'";

        // %Z   The timezone name or abbreviation.
        case 90:
          throw "this strftime() does not support '%Z'";

        default:
          throw "unrecognized strftime sequence '%"+fmt[i]+"'";
        }

        inspec = false;
        alt_o  = false;
        continue;
      }

      if (c == 37) { // %
        inspec = true
        continue;
      }

      s += fmt[i];
    }
    return s;
  };

  Lens.strftime = strftime;
  window.strftime = strftime;
})();
`, MIMEType: `application/javascript` },
	"/": { Content: `<html>
<head>
	<meta charset="UTF-8"> 
	<title>Doomsday</title>
  <link rel='stylesheet' type='text/css' href='web/assets/stylesheet.css'>
  <link href="https://fonts.googleapis.com/css?family=Walter+Turncoat" rel="stylesheet"> 
</head>
<body>
	<div id="navbar" class="sticky">
		<div class="navbar-content navbar-border navbar-button" id="hamburger-box">
			<svg id="hamburger" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none" viewBox="0 0 201 146.17"><defs><style>.cls-1{fill:#ffffff;stroke:#fff;stroke-miterlimit:10;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><rect class="cls-1" x="0.5" y="0.5" width="200" height="29.27"/><rect class="cls-1" x="0.5" y="59.04" width="200" height="29.27"/><rect class="cls-1" x="0.5" y="116.4" width="200" height="29.27"/></g></g></svg>
		</div>
		<div class="navbar-content navbar-border" id="logo-box">
			<div id="logo">doomsday</div>
		</div>
		<div class="navbar-content">
			<div id="subtitle">an x509 monitoring tool</div>
		</div>
	</div>

	<div id="viewport-container">
		<div id="hamburger-menu" class="sticky navbar-border">
			<div class="hamburger-menu-button navbar-button" id="logout-button">logout</div>
		</div>
		<div id="viewport">
			<div id="login"></div>
			<div id="certs"></div>
		</div>
	</div>

	<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
	<script src="web/assets/lens.js"></script>

	<script type="text/html" id="template:login-page">
		<div id="login-page-container">
			<div id="login-box">
				<form id="login-form">
					<div class="login-text-box">
						<label for="login-form-username">Username</label>
						<input type="text" 
						       name="username" 
									 id="login-form-username-input" 
						/>
					</div>
					<div class="login-text-box">
						<label for="login-form-password">Password</label>
						<input type="password" 
						       name="password" 
						       id="login-form-password-input"
						/>
					</div>
					<div class="login-button-box">
						<input type="submit" id="login-form-submit-button" value="Login"/>
					</div>
				</form>
				[[ if (typeof _.error_message !== 'undefined') { ]]
					<div class="login-error">[[= _.error_message ]]</div>
				[[ } ]]
			</div>
		</div>
	</script>

	<script type="text/html" id="template:no-certs-page">
		<div id="no-cert-container">
		  <div class="no-cert-textbox">
		    No Certificates Are Expiring Soon
			</div>
		</div>
	</script>

	<script type="text/html" id="template:cert-card-header">
		[[
			if (_.value == "") {
				_.value = "<em>(not provided)</em>"
			}
		]]
		<div class="certs-content-header">[[= _.value ]]</div>
	</script>

	<script type="text/html" id="template:cert-card-path-list">
		<div class="certs-content-label">PATHS</div>
		[[
			var backends = [];
			_.paths.forEach(function(path) {
			  var backendFound = false;
			  var i = 0;
				for (; i < backends.length; i++) {
					if (path.backend == backends[i].name) {
						backendFound = true; 
					  backends[i].paths.push(path.location);
						break;
					}
				}

				if (!backendFound) {
					backends.push({name: path.backend, paths: [path.location]});
				} 
			});

			backends.sort( (x, y) => (x.name < y.name ? -1 : 1) );
			backends.forEach(function(b, i) { 
		]]
		<div class="certs-content-path-backend-container">
			<div class="certs-content-label certs-content-backend-label">[[= lens.escapeHTML(b.name) ]]</div>
			<div class="certs-content-path-backend-paths-container">
		[[
				backends[i].paths.sort(); 
		]]
		    <div class="certs-content-value">[[= lens.escapeHTML(backends[i].paths[0]) ]]</div>
		[[
				backends[i].paths.slice(1).forEach(function(path) {
		]]
					<div class="horizontal-line"></div>
					<div class="certs-content-value">[[= lens.escapeHTML(path) ]]</div>
		[[
				});
		]]
		  </div>
		</div>
		[[
			});
		]]
	</script>

	<script type="text/html" id="template:cert-card-line">
		[[ 
		  if (!Array.isArray(_.value)) {
				_.value = [ _.value ];
		  }
		]]
		<div class="certs-content-label">[[= _.label ]]</div>
		<div class="certs-content-value">[[= _.value[0] ]]</div>
		[[ 
		if (_.value.length > 1) {
		  _.value.slice(1).forEach(function(v) {
		]]
		    <div class="horizontal-line"></div>
			  <div class="certs-content-value">[[= v ]]</div>
		[[
		  });
		}
		]]
	</script>

	<script type="text/html" id="template:cert-card">
		<div class="cert-grid-container">
			[[
				expired = new Date().getTime()/1000 > _.cert.not_after;
				var expiredClass="";
				if (expired) { expiredClass = " expired-card"; }
			]]
			<div class="cert-card[[= expiredClass ]]" [[= (expired ? "" : 'style="background-color: rgb(' + _.color[0] + ',' + _.color[1] + ',' + _.color[2] + ');"') ]] >
			  [[ lens.include("cert-card-header", { label: "COMMON NAME", value: lens.escapeHTML(lens.maybe(_.cert.common_name, "not provided")) }); ]]
				<div class="certs-content-body">
				[[
				    timefmt = Lens.strftime("%a, %b %d %Y at %I:%M %P", _.cert.not_after );
				    var label = "NOT AFTER";
						if (expired) {
						  label = "REST IN PEACE";
							//timefmt = "<s>"+timefmt+"</s> EXPIRED";
						}
						lens.include("cert-card-line", { label: label, value: timefmt });
						lens.include("cert-card-path-list", { paths: _.cert.paths });
				]]
					</div>
			</div>
		</div>
	</script>

	<script type="text/html" id="template:cert-list">
		  <div class="cert-list">
				<div class="cert-list-footer-container">
					<div class="cert-list-footer-left-buffer"></div>
					<div class="cert-list-footer-timeline-container">
						<div class="cert-list-footer-timeline-label">[[= _.header ]]</div>
					</div>
				</div>
				<div class="cert-list-body">
				  <div class="cert-list-body-card-container">
					[[
						_.certs.forEach(function(v) {
							lens.include("cert-card", { cert: v, color: _.color });
						}); 
					]]
					</div>
					<div class="cert-list-body-timeline-container">
						<div class="cert-list-body-line-taper-in"></div>
						<div class="cert-list-body-timeline-line"></div>
						<div class="cert-list-body-line-taper-out"></div>
					</div>
				</div>
			</div>
	</script>

	<script type="text/html" id="template:cert-list-group">
		[[
			_.lists.forEach(function(v, i) {
			  if (i == _.lists.length - 1) {
					v.skip_lower_line = true;
				}

				lens.include("cert-list", v);
			});
		]]
	</script>

	<script>
		function durationString(days) {
			if (days < 0) {
				return "THE DAWN OF TIME";
			} else if (days == 0) {
				return "NOW";
			} else if (days == 1) {
				return "1 DAY";
			} else if (days < 7) {
				return days + " DAYS";
			} else {
				var weeks = Math.floor(days / 7);
				var remaining_days = days - (weeks * 7);
				var ret = weeks + " WEEKS";
				if (weeks == 1) {
					ret = "1 WEEK";
				}
				if (remaining_days > 0) {
					ret = ret + ", " + durationString(remaining_days);
				}
				return ret;
			}
		}

		function cardColor(days) {
			if (days < 0) {
				return [0, 0, 0];
			} else if (days < 3) {
				return [229, 53, 69]; //red
			} else if (days < 7) {
				return colorShift([229, 53, 69], [253, 126, 20], (7-days) / 4);
			} else if (days < 14) {
				return colorShift([253, 126, 20], [255, 193, 7], (14-days) / 7);
			} else if (days < 21) {
				return colorShift([255, 193, 7], [200, 185, 15], (21-days) / 7);
			} else if (days < 28) {
				return colorShift([200, 185, 15], [40, 167, 69], (28-days) / 7);
			} 

      return [40, 167, 69];
		}

		function colorShift(end, start, percent) {
			return [
				start[0] + ((end[0] - start[0])*percent),
				start[1] + ((end[1] - start[1])*percent),
				start[2] + ((end[2] - start[2])*percent)
			];
		}

		function updateCertList() {
			$.ajax({
				method: "GET",
				url: "/v1/cache",
				dataType: "json",
				statusCode: {
					200: function(data) {
						var now = new Date().getTime()/1000;

						var lists = [];

						for (var i = 0; i < data.content.length; i++) {
							var cert = data.content[i];
							if (cert.not_after - now > 7776000) {
								break;
							}

							if (lists.length == 0 || cert.not_after > lists[lists.length-1].cutoff) {
								var maxDays = Math.max(0, Math.ceil((cert.not_after - now) / 86400));
								var label = durationString(maxDays - 1);
								lists.push({
									header: label, 
									cutoff: now + (maxDays * 86400),
									color: cardColor(maxDays - 1),
									certs: [cert]
								});
							} else {
								lists[lists.length-1].certs.push(cert);
							}
						}

						if (lists.length == 0) {
							$("#certs").template("no-certs-page");
							return;
						}

						$("#certs").template("cert-list-group", {lists: lists});
						$("#certs").show();
			      certUpdateID = setTimeout(updateCertList, 60 * 1000);
					},
					400: function(data) {gotoLogin("Bad request");},
					401: function(data) {deleteCookie('doomsday-token'); gotoLogin("Your session has expired");},
					500: function(data) {gotoLogin("Internal server error");}
				}
			})
		}


		function getAuthType() {
		  var authType = "None";
			$.ajax({
				async: false,
				method: "GET",
				url: "/v1/info",
				dataType: "json",
				success: function(data) {
					authType = data.auth_type;
				},
			})
			return authType;
		}

		$(document).ready(function(){
			var hamburgerBox = $('#hamburger-box');
		  NORMAL_HAMBURGER_WIDTH = hamburgerBox.width();
		  NORMAL_HAMBURGER_HEIGHT = $('#hamburger').height();
		  HAMBURGER_BOX_PADDING = hamburgerBox.innerWidth() - NORMAL_HAMBURGER_WIDTH;

			var authType = getAuthType();
			if (authType == "None") {
				logout_button = $('#logout-button')
				logout_button.addClass('hamburger-menu-button-inactive');
				logout_button.removeClass('navbar-button hamburger-menu-button');
				logout_button.mouseover(function() { logout_button.text('auth is turned off'); });
				logout_button.mouseout(function() { logout_button.text('logout'); });
			} else {
				$('#logout-button').click(function() {
					closeHamburgerMenu();
					handleLogout();
				})
			}
			if (authType == "Userpass" && getCookie('doomsday-token') == "") {
				gotoLogin();
			} else {
			  gotoDashboard();
			}
		});

		certUpdateID = -1;

		function handleLogin(e) {
			var username = $('input[name=username]').val();
			var password = $('input[name=password]').val();
			$.ajax({
				method: "POST",
				url: "/v1/auth",
				contentType: "application/json",
				dataType: "json",
				data: JSON.stringify({username: username, password: password}),
				statusCode: {
					200: function() {
						gotoDashboard();
					},
					400: function() {gotoLogin("Bad Request")},
					401: function() {gotoLogin("The username and password did not match")},
					404: function() {gotoLogin("Endpoint Not Found")},
					500: function() {gotoLogin("Internal Server Error")}
				}
			})
			return false;
		}

		function handleLogout() {
			deleteCookie('doomsday-token');
			gotoLogin();
		}

		function gotoLogin(message) {
			clearTimeout(certUpdateID);
			certUpdateID = -1;
			$("#certs").hide();
			$("#hamburger-box").hide();

			var templateParams = {};
			if (typeof message !== 'undefined') {
				templateParams.error_message = message;
			}
			$("#login").template("login-page", templateParams);

			$("#login-form").submit(handleLogin);
			$("#login-form input[name=password]").val("");
			$("#login").show();
		}

		function gotoDashboard() {
			$("#login").hide();
			$("#login-form").off("submit");
			$('#hamburger-box').show();

			updateCertList();
		}

    navbarMousedOver = false;
		currentScrollNavTransparency = 0;

		function setNavbarTransparency(percentage) {
			//Set the min opacity here as the fallback.
			var navbarOpacity = 0.5;
			var subtitleOpacity = 0;
			var logoBoxBorderOpacity = 0.0;
			var logoBoxBorderMaxOpacity = 0.3;

			navbarOpacity = 1 - (navbarOpacity * percentage);
			subtitleOpacity = 1 - (percentage);
			logoBoxBorderOpacity = logoBoxBorderMaxOpacity - (logoBoxBorderMaxOpacity * (percentage));

			$('#navbar').css("opacity", navbarOpacity);
			$('#logo-box').css("border-right-color", "rgba(255, 255, 255, "+logoBoxBorderOpacity+")")
			$('#navbar .separator').css("opacity", subtitleOpacity);
			$('#navbar #subtitle').css("opacity", subtitleOpacity);
		}

		$(window).scroll(function() {
			var maxPixelDistance = 60;
			currentScrollNavTransparency = Math.min(document.body.scrollTop / maxPixelDistance, 1);
			if (!navbarMousedOver && !hamburgerMenuOpen) {
			  currentAnimNavTransparency = currentScrollNavTransparency;
				setNavbarTransparency(currentScrollNavTransparency);
			}
		})

		FRAMERATE = 42;
    FRAME_INTERVAL = 1000/FRAMERATE;
		
		NO_ANIM = -1;
		navFadeAnimID = NO_ANIM;
		currentAnimNavTransparency = currentScrollNavTransparency;
		
		function navbarFade(start, end) {
			if (navFadeAnimID != NO_ANIM) {
				clearInterval(navFadeAnimID);
			}

			var duration = 0.3; //in seconds
			var totalDelta = end - start;
      var lastAnimTime = new Date().getTime();
			return function() {
				var now = new Date().getTime();
				var timeDelta = now - lastAnimTime;
				var updatePercentage = (duration * 1000) / timeDelta;
			  var frameDelta = totalDelta / updatePercentage;
			  lastAnimTime = now;

				currentAnimNavTransparency = currentAnimNavTransparency + frameDelta;
				if (totalDelta > 0) {
					var target = Math.min(currentScrollNavTransparency, end);
					if (currentAnimNavTransparency >= target) {
						currentAnimNavTransparency = target;
						clearInterval(navFadeAnimID);
						navFadeAnimID = NO_ANIM;
					} 
				} else {
					if (currentAnimNavTransparency <= end) {
						currentAnimNavTransparency = end;
						clearInterval(navFadeAnimID);
						navFadeAnimID = NO_ANIM;
					} 
				}

				setNavbarTransparency(currentAnimNavTransparency);
			}
		}

		$('#navbar').mouseover(function() {
			navbarMousedOver = true;
			navFadeAnimID = setInterval(navbarFade(1, 0), FRAME_INTERVAL);
		})

		$('#navbar').mouseout(function() {
			navbarMousedOver = false;
			if (!hamburgerMenuOpen) {
				navFadeAnimID = setInterval(navbarFade(0, 1), FRAME_INTERVAL);
			}
		})

		hamburgerMenuOpen = false;

		currentHamburgerMenuOpenness = 0;

		function setHamburgerMenuOpenness(percentage) {
			var menu = $('#hamburger-menu');
			//The +1 is for the 1px wide border
			var menuWidth = menu.innerWidth() + 1;
			var desiredShift = menuWidth * percentage;

			menu.css('left', (-menuWidth + desiredShift) + "px");

			var boxWidth = Math.max(desiredShift - (1 + HAMBURGER_BOX_PADDING), NORMAL_HAMBURGER_WIDTH);
			var boxHeight = NORMAL_HAMBURGER_HEIGHT - (percentage * (NORMAL_HAMBURGER_HEIGHT * 0.1));
			$('#hamburger-box').css('width', boxWidth+"px");
			$('#hamburger').css('height', boxHeight+"px");
		  currentHamburgerMenuOpenness = percentage;
		}

		menuOpenAnimID = NO_ANIM;

		function hamburgerMenuSlide(start, end) {
      if (menuOpenAnimID != NO_ANIM) {
				clearInterval(menuOpenAnimID);
			}
			var duration = 0.2; //in seconds
			var totalDelta = end - start;
      var lastAnimTime = new Date().getTime();
			return function() {
				var now = new Date().getTime();
				var timeDelta = now - lastAnimTime;
				var updatePercentage = (duration * 1000) / timeDelta;
			  var frameDelta = totalDelta / updatePercentage;
			  lastAnimTime = now;

				desiredOpenness = currentHamburgerMenuOpenness + frameDelta;
				if ((totalDelta >= 0 && desiredOpenness >= end) || (totalDelta < 0 && desiredOpenness <= end)) {
					desiredOpenness = end;
					clearInterval(menuOpenAnimID);
					menuOpenAnimID = NO_ANIM;
				}

				setHamburgerMenuOpenness(desiredOpenness);
			}
		}

		function openHamburgerMenu() {
			menuOpenAnimID = setInterval(hamburgerMenuSlide(0, 1), FRAME_INTERVAL);
			hamburgerMenuOpen = true;
			navFadeAnimID = setInterval(navbarFade(1, 0), FRAME_INTERVAL);
		}

		function closeHamburgerMenu() {
			menuOpenAnimID = setInterval(hamburgerMenuSlide(1, 0), FRAME_INTERVAL);
			hamburgerMenuOpen = false;
			if (!navbarMousedOver) {
				navFadeAnimID = setInterval(navbarFade(0, 1), FRAME_INTERVAL);
			}
		}

		function toggleHamburgerMenu() { hamburgerMenuOpen ? closeHamburgerMenu() : openHamburgerMenu(); }

		$('#hamburger-box').click(function() {
			toggleHamburgerMenu();
		})


		function getCookie(name) {
			var state = 0;
			var length = document.cookie.length
			var found = false;
			var key = "";
			var value = "";
			function checkKey() { 
				if (key == name) {
					found = true;
				} else {
					key = "";
					value = "";
					state = 2;
				}
			}
			for (var i = 0; i < length && !found; i++) {
				var c = document.cookie.charAt(i);
				switch(state) {
					case 0: //parsing from the start of the cookie
						if (c == '=') {
							state = 1;
						} else if (c == ';') {
							value = key;
							key = "";
							checkKey();
						} else {
							key = key + c;
						}
						break;
					case 1: //parsing from after the '=' of a cookie
						if (c == ';') {
							checkKey();
						} else {
							value = value + c;
						}
						break;
					case 2: //chew through whitespace after semicolon
						if (c == '=') {
							key = "";
							state = 1;
						} else if (c == ';') {
							key = "";
							value = "";
							checkKey();
						} else if (c != ' ' && c != '\t') {
							key = c;
							state = 0; 
						}
						break;
				}
			}

			if (!found && key != name) {
				value = "";
			}

			return value;
		}

		function deleteCookie(name) {
			document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
		}
	</script>
</body>
</html>
`, MIMEType: `text/html` },
	"/web/assets/stylesheet.css": { Content: `#viewport {
	display: flex;
	width: 100%;
	height: calc(100vh - 50px);
	overflow: auto;
	background: repeating-linear-gradient(
		45deg,
		rgba(0, 0, 0, 0),
		rgba(0, 0, 0, 0) 60px,
		rgba(0, 0, 0, 0.15) 60px,
		rgba(0, 0, 0, 0.15) 120px
  );
  padding-top: 50px;
}

#login {
	height: 100%;
	width: 100%;
	display: none;
}

#login-page-container {
	height: 100%;
	width: 100%;
	display: flex;
	align-items: center;
	justify-content: center;
}

#login-box {
	background-color: #252525;
	border-radius: 14px;
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
	align-content: center;
	width: 400px;
}

#login-box label {
	color: white;
	width: 100%;
}

#login-form {
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
	align-content: center;
	margin: 1em;
	width: 100%;
}

.login-text-box {
	margin: 0.75em 1.5em;
	width: 100%;
	display: flex;
	flex-wrap: wrap;
}

.login-text-box input[type=text], input[type=password] {
	font-size: 20px;
	width: 100%;
	border-radius: 6px;
}

.login-button-box {
	margin: 0.4em;
	display: flex;
	justify-content: center;
	width: 100%;
}

.login-button-box input[type=submit] {
	font-size: 20px;
	font-family: inherit;
	border-radius: 6px;
	padding: 0em 1em;
}

.login-error {
	margin: 1em;
	margin-top: 0;
	padding: 0.2em;
	font-size: 16px;
	width: 90%;
	text-align: center;
	border-radius: 6px;
	background-color: rgb(229, 53, 69);
}

#navbar {
	background-color: #252525;
	display: flex;
	align-content: center;
	font-size: 40;
	height: 1.5em;
	border-bottom: solid rgba(0,0,0,0.4) thin;
	z-index: 100;
	top: 0;
	width: 100%;
}

#navbar-left-buffer {
	width: 0px;
}

.navbar-content {
	display: flex;
	align-items: center;
	justify-content: center;
	padding-left: 15px;
	padding-right: 15px;
}

.navbar-border {
	border-right-color: rgba(255, 255, 255, 0.3);
	border-right-style: solid;
	border-right-width: thin;
}

.sticky {
	position: fixed;
}

#navbar #logo {
  color: white;
	font-size: 40;
	position: relative;
	top: -2px;
	-webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

#hamburger {
	height: 25px;
	width: 25px;
	flex: 1 1 auto;
}

#hamburger-box {
	display: flex;
	align-items: center;
}

.navbar-button:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

.navbar-button:active {
  background-color: rgba(255, 255, 255, 0.2);
}

#hamburger-menu {
	background-color: rgba(37, 37, 37, 0.9);
	height: calc(100% - 60px);
	width: 250px;
	z-index: 100;
	top: 60px;
	left: -251px;
	display: inline-block;
}

.hamburger-menu-button {
	display: flex;
	align-items: center;
	align-content: center;
	justify-content: center;
	height: 30px;
	padding: 5px 20px 5px 20px;
	font-size: 24px;
	color: white;
	border-style: solid none solid none;
	border-width: thin;
	border-color: rgba(255, 255, 255, 0.3);
	-webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
	background-color: #252525;
}

.hamburger-menu-button-inactive {
	display: flex;
	align-items: center;
	align-content: center;
	justify-content: center;
	height: 30px;
	padding: 5px 20px 5px 20px;
	font-size: 24px;
	color: grey;
	border-style: solid none solid none;
	border-width: thin;
	border-color: rgba(255, 255, 255, 0.3);
	-webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
	background-color: #252525;
}

#navbar #subtitle {
	color: white;
	font-size: 20;
	-webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

#certs {
	margin-top: 20px;
  flex: 1 1 auto;
}

#no-cert-container {
	display: flex;
}

.no-cert-textbox {
	border-style: solid;
	border-radius: 8px;
	border-color: white;
	border-width: thick;
	font-weight: bold;
	background-color: rgba(0, 0, 0, 0.15);
	color: white;
	font-size: 4vw;
	padding: 0.75em;
	position: relative;
	top: 30vh;
	margin: auto;
}

body {
	margin: 0px;
	background-color: #444444;
}

div {
	font-family: "Walter Turncoat", "Verdana";
	color: rgba(0,0,0,.8);
}

.cert-grid-container {
	width: 100%;
}

.certs-content-header {
	background-color: rgba(0,0,0,.0700);
	border-radius: 8px 8px 0px 0px;
	border-bottom-style: solid;
	border-bottom-color: rgba(0,0,0,0.0500);
	border-width: thin;
	text-align: center;
	font-size: 24;
	padding: 0.3em 0em;
	font-weight: bold;
	color: #FFFFFF;
}

.certs-content-body {
	padding: 0.5em 1em;
}

.cert-list-footer-container {
  margin: 4px 8px 4px 0;
	display: flex;
}

.cert-list-footer-left-buffer {
	align-self: center;
	align-content: center;
	display: flex;
	flex: 1 1 auto;
}

.cert-list-footer-timeline-label {
	color: white;
	text-align: right;
	font-size: 20px;
	-webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}


.cert-list-body-timeline-container {
	position: relative;
	margin-right: 10px;
}

.cert-list-body-line-taper-in {
	height: 40px;
	width: 4px;
	position: relative;
	background-image: linear-gradient(to top, rgba(255,255,255,1), rgba(0,0,0,0));
}

.cert-list-body-timeline-line {
	width: 4px;
	position: absolute;
	height: calc(100% - 80px);
	background-color: white;
}

.cert-list-body-line-taper-out {
	height: 40px;
	width: 4px;
	position: absolute;
	top: calc(100% - 40px);
	background-image: linear-gradient(to bottom, rgba(255,255,255,1), rgba(0,0,0,0));
}

.cert-list-body {
	display: flex;
}

.cert-list-body-card-container {
	flex: 1 1 auto;
}

.cert-list-body-card-container {
  display: flex;
	flex-wrap: wrap;
	flex: 1 1 auto;
}

.cert-list {
	width: 100%;
}

.cert-card {
	border-style: solid;
	border-width: thin;
	border-color: rgba(255,255,255, 0.1) rgba(0, 0, 0, 0.0300) rgba(0, 0, 0, 0.300) rgba(255, 255, 255, 0.1);
	margin: 0.5em 1em;
	border-radius: 8px;
	box-shadow: 7px 5px rgba(0,0,0,0.450);
}

.certs-content-label {
	font-weight: bold;
	font-size: 12px;
	color: #ffffff;
	margin-top: 0.5em;
}

.certs-content-value {
	padding-left: 8px;
	margin-bottom: 0.1em;
	font-size: 18;
	word-wrap: break-word;
}

.certs-content-path-backend-container {
	margin-top: 0.35em;
	margin-left: 0em;
	background-color: rgba(0, 0, 0, 0.05);
	border-style: solid;
	border-width: thin;
	border-color: rgba(0, 0, 0, 0.1) rgba(255, 255, 255, 0.1) rgba(255, 255, 255, 0.1) rgba(0, 0, 0, 0.1) ;
	border-radius: 8px;
	padding: 0.5em;
}

.certs-content-path-backend-container .certs-content-label {
	margin-top: 0.25em;
	font-size: 12px;
	font-weight: bold;
}

.certs-content-path-backend-container .certs-content-value {
	margin-left: 0;
	padding-left: 0;
}

.horizontal-line {
	display: block;
	height: 2px;
  width: 95%;
	margin: auto;
	background-color: rgba(0,0,0,0.100);
}

.cert-list-footer-left-buffer .horizontal-line {
	width: 100%;
	background-color: white;
	height: 4px;
}

.horizontal-line-taper {
	height: 4px;
	width: 40px;
	position: relative;
	margin-right: 1%;
	background-image: linear-gradient(to right, rgba(255,255,255,1), rgba(0,0,0,0));
}

.expired-card {
	background-color: #252525;
	box-shadow: 7px 5px rgb(229, 53, 69);
	border-color: rgba(255, 255, 255, 0.25) rgba(0, 0, 0, 0.7) rgba(0, 0, 0, 0.7) rgba(255, 255, 255, 0.25) !important;
}

.expired-card .certs-content-header {
  border-color: rgba(255, 255, 255, 0.1);
}

.expired-card .certs-content-value {
	color: rgb(229, 53, 69);
}

@media only screen and (min-width: 600px) {
	#navbar #subtitle {
		 display: inline-block;
	}
}

@media only screen and (min-width: 1200px) {
	.cert-grid-container {
	  width: 50%;
  }
	
}

@media only screen and (min-width: 1800px) {
  .cert-grid-container {
	  width: 33.33333%;
  }
}

`, MIMEType: `text/css` },
}
